@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{

}
<h3 id="patientName"></h3>

<table id="medicalTransactionsTable" class="table table-striped">
    <thead>
        <tr>
            <th><input type="text" id="patientfirst" placeholder="Patient First" class="filter"></input></th>
            <th><input type="text" id="patientlast" placeholder="Patient Last" class="filter"></input></th>
            <th>
                <span>Total Cost</span>

                <div id="slider">

                    <div id="slidertrack">
                        <span id="min">0k</span>
                        <span id="max">100k</span>
                        <div class="progress"></div>
                    </div>

                    <div class="range-input">
                        <input type="range" class="range-min" min="0" max="100000" value="0" step="1000">
                        <input type="range" class="range-max" min="0" max="100000" value="100000" step="1000">
                    </div>
                </div>
                <svg id="toggle" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
            </th>
            <th>
                <span>Date</span>
                <span id="datepicker" style="display: none">
                    <input type="date" id="start" value="2000-01-01" min="2000-01-01" class="date"/>
                    <span> - </span>
                    <input type="date" id="end" min="2000-01-01" class="date"/>
                </span>
                <svg id="datetoggle" xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                    <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4" />
                </svg>
            </th>
            <th>
                <input type="text" id="nurse" placeholder="Nurse" class="filter"></input>
            </th>

            <th>
                <input type="text" id="doctor" placeholder="Doctor" class="filter"></input>
            </th>

        </tr>
    </thead>
    <tbody>
        <!-- Data will be populated here using JavaScript -->
    </tbody>
</table>

<span id="pageInfo" class="mr-2">Page <span id="currentPage">1</span> of <span id="totalPages">?</span></span>

<ul class="pagination">
    <li class="page-item">
        <button class="page-link" id="firstPage">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-double-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
                <path fill-rule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
            </svg>
        </button>
    </li>

    <li class="page-item">
        <button class="page-link" id="prevPage">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-left" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0" />
            </svg>
        </button>
    </li>
   
    <li class="page-item">
        <button class="page-link" id="nextPage">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708" />
            </svg>
        </button>
    </li>

    <li class="page-item">
        <button class="page-link" id="lastPage">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-double-right" viewBox="0 0 16 16">
                <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708" />
                <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708" />
            </svg>
        </button>
    </li>

    <li class="page-item ms-5">
        <input type="number" class="form-control form-control-color" id="page-input" title="Input a Page" placeholder="#" style="cursor: text;">
    </li>

    <li class="page-item">
        <button type="submit" id="submitButton"class="btn btn-primary ms-1">GO</button>
    </li>

    <li class="page-item">
        <button type="submit" id="resetButton" class="btn btn-danger ms-1">RESET</button>
    </li>
       
  
</ul>
</nav>

@* <--------------------JavaScript--------------------> *@
<script>
    //global
    var currentPage = 1;
    document.addEventListener("DOMContentLoaded", function () {
        
        //intialization and first page load
        const pageSize = 10;
        var sliderInputs = document.querySelectorAll(".range-input input");
        var values = document.querySelectorAll("#slidertrack span");
        var progress = document.querySelector("#slidertrack .progress");
        var min, max;
        var dates = document.querySelectorAll(".date");
        document.getElementById('end').valueAsDate = new Date();
        loadPage(currentPage);

        //<--------------------Input/Button Functionality-------------------->// 

        //input forms functionality
        document.getElementById('submitButton').addEventListener('click', function () {
            let page = document.getElementById('page-input').value;
            if (page > 0 && page <= parseInt(totalPages.innerHTML)) {
                currentPage = page;
            }
            loadPage(currentPage);
        });

        document.getElementById('patientfirst').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });

        document.getElementById('patientlast').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });

        document.getElementById('doctor').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });
        document.getElementById('nurse').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });
        
        //reload page when date forms recieve input
        dates.forEach(date => {
            date.addEventListener("input", function () {
                loadPage(currentPage);
            });
        });

        //toggle buttons functionality
        document.getElementById('toggle').addEventListener('click', function () {
            //update display in accordance to toggle state
            if (document.getElementById('slider').style.display === 'none') {
                document.getElementById('slider').style.display = 'inline-block'
                document.getElementById('toggle').style.transform = 'rotate(45deg)';
                document.querySelector(this.parentElement.nodeName + " span").style.display = 'none';
            }
            else {
                document.getElementById('slider').style.display = 'none';
                document.getElementById('toggle').style.transform = '';
                document.querySelector(this.parentElement.nodeName + " span").style.display = 'inline';
            }
        });

        document.getElementById('datetoggle').addEventListener('click', function () {
            //update display in accordance to toggle state
            let header = document.querySelectorAll(this.parentElement.nodeName + " span")[3];
            if (document.getElementById('datepicker').style.display === 'none') {
                document.getElementById('datepicker').style.display = 'inline-block'
                document.getElementById('datetoggle').style.transform = 'rotate(45deg)';
                header.style.display = 'none';
            }
            else {
                document.getElementById('datepicker').style.display = 'none';
                document.getElementById('datetoggle').style.transform = '';
                header.style.display = 'inline';
            }
        });
        
        //slider functionality
        sliderInputs.forEach(input => {
            input.addEventListener("input", function () {
                //set min and max to whichever slider has to smaller/bigger value
                if (parseInt(sliderInputs[0].value) > parseInt(sliderInputs[1].value)) {
                    min = sliderInputs[1];
                    max = sliderInputs[0];
                }
                else {
                    min = sliderInputs[0];
                    max = sliderInputs[1];
                }

                //format custom progress bar in accordance to sliderInputs
                progress.style.left = (parseInt(min.value) / min.max) * 100 + "%";
                progress.style.right = 100 - (parseInt(max.value) / min.max) * 100 + "%";

                //update values to follow slider knob and display its value
                values[0].innerHTML = sliderInputs[0].value/1000 + "K"
                values[1].innerHTML = sliderInputs[1].value/1000 + "K"
                values[0].style.left = (parseInt(sliderInputs[0].value) / sliderInputs[0].max) * 100 - 6 + "%";
                values[1].style.right = 100 - (parseInt(sliderInputs[1].value) / sliderInputs[0].max) * 100 - 6 + "%";
            })

            //trigger pageload once dragging is complete
            input.addEventListener("mouseup", function () {
                loadPage(currentPage);
            })
        });

        //paging buttons functionality
        document.getElementById('patientfirst').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });
        document.getElementById('patientlast').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });
        document.getElementById('doctor').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });
        document.getElementById('nurse').addEventListener('keypress', function (e) {
            if (e.key === "Enter") {
                loadPage(currentPage);
            }
        });

        //reset button
        document.getElementById("resetButton").addEventListener('click', function () {
            document.querySelectorAll("input").forEach(input => {
                input.value = input.defaultValue;
            });
            let event = new Event("input");
            sliderInputs.forEach(slider => {
                slider.dispatchEvent(event);
            });
            dates.forEach(date => {
                date.dispatchEvent(event);
            });
            currentPage=1;
            loadPage(currentPage);

        }); 
    });


    //<--------------------Displaying Data to Table-------------------->//
    function loadPage(pageIndex) {
        // document.getElementById('spinner').style.display = 'block';

        //set up url
        const searchParams = new URLSearchParams(window.location.search);
        var patientId = searchParams.get('patientId');
        var url = `/medicalTransactions/GetMedicalTransactions?pageIndex=${pageIndex}&pageSize=10`;
        var sliderInputs = document.querySelectorAll(".range-input input");

        //check for cross tabling
        if (patientId) {
            url += '&patientId=' + patientId;
        }

        //set minimum and maximum based off slider inputs
        if (parseInt(sliderInputs[0].value) > parseInt(sliderInputs[1].value)) {
            var max = sliderInputs[0].value;
            var min = sliderInputs[1].value;
        }
        else {
            var max = sliderInputs[1].value;
            var min = sliderInputs[0].value;
        }

        //create url based off input values
        url +=
            '&firstname=' + document.getElementById('patientfirst').value +
            '&lastname=' + document.getElementById('patientlast').value +
            '&max=' + max +
            '&min=' + min +
            '&nurse=' + document.getElementById('nurse').value +
            '&doctor=' + document.getElementById('doctor').value +
            '&start=' + document.getElementById('start').value +
            '&end=' + document.getElementById('end').value;
        
        //fetch
        fetch(url)
            .then(response => response.json())
            .then(data => {

                //create special state for when nothing passes query
                if (Math.ceil(data.totalRecords / 10) == 0) {
                    //create special state for when nothing passes query
                    document.getElementById('patientName').innerHTML = 'NO RECORDS'
                    document.getElementById('medicalTransactionsTable').getElementsByTagName('tbody')[0].innerHTML = '';
                    pageIndex = 0;
                    updatePagingControls(pageIndex, data.totalRecords);
                }
                //check/correct: current page being greater than total page count
                else if (pageIndex > Math.ceil(data.totalRecords / 10)) {
                    currentPage = Math.ceil(data.totalRecords / 10);
                    console.log(currentPage)
                    loadPage(currentPage);


                }
                //default action
                else {
                    populateTable(data, patientId);
                    updatePagingControls(pageIndex, data.totalRecords);
                }
                //document.getElementById('spinner').style.display = 'none';
            })
            .catch(error => console.error('Unable to get medical transactions data.', error));
    
    }

    //update webpage to display proper paging
    function updatePagingControls(currentPage, totalCount) {
        const pageSize = 10;
        const totalPages = Math.ceil(totalCount / pageSize);

        document.getElementById('currentPage').textContent = currentPage;
        document.getElementById('totalPages').textContent = totalPages;

        //set disabled states
        document.getElementById('prevPage').disabled = currentPage <= 1;
        document.getElementById('nextPage').disabled = currentPage >= totalPages;
        document.getElementById('firstPage').disabled = currentPage <= 1;
        document.getElementById('lastPage').disabled = currentPage >= totalPages;
    }

    //create html from data and add it as rows to table 
    function populateTable(data, patientId) {
        const tableBody = document.getElementById('medicalTransactionsTable').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = ''; // Clear the table body

        //Display to webpage whether medical transactions is filtered to a specific patient
        var patientName = 'All Patients';
        if (patientId) {
            patientName = data.patientName;
        }
        document.getElementById('patientName').innerText = 'Medical Transactions of ' + patientName;
        // Iterate through the data and append rows to the table body
        data.data.forEach(mt => {
            let row = tableBody.insertRow();
            let cell1 = row.insertCell(0);
            let cell2 = row.insertCell(1);
            let cell3 = row.insertCell(2);
            let cell4 = row.insertCell(3);
            let cell5 = row.insertCell(4);
            let cell6 = row.insertCell(5);


            cell1.innerHTML = mt.patientFirstName;
            cell2.innerHTML = mt.patientLastName;
            cell3.innerHTML = mt.totalCost;
            cell4.innerHTML = mt.transactionDate;
            cell5.innerHTML = (mt.nurseFirstName + ' ' + mt.nurseLastName);
            cell6.innerHTML = (mt.doctorFirstName + ' ' + mt.doctorLastName);
        });
    }</script>
